@page "/asignar-permisos/{RolId}/{RolName}"
@inject IRepositorio repositorio
@inject IMostrarMensaje mostrarMensajes
@inject NavigationManager navigationManager

<Card Class="card">
    <CardHeader Class="card-header">
        <Texto Typo="Typo.h5">Administrar Permisos del Rol: @RolName</Texto>
    </CardHeader>
    <CardBody Class="card-body">
        <div class="table-responsive">
            <table class="table table-sm table-striped table-hover table-bordered text-center">
                <thead>
                    <tr>
                        <th>Tipo</th>
                        <th>Permiso</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if(permissionDto != null)
                    {
                        @foreach (var item in permissionDto.RoleClaims)
                        {
                            <tr>
                                <td>@item.Type</td>
                                <td>@item.Value</td>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="gridCheck" @bind="@item.Selected">
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </CardBody>
    <CardFooter Class="card-footer border-top text-right bg-transparent">
        <Boton Class="btn btn-secondary btn-sm mr-2" ButtonType="ButtonType.Button" @onclick="AsignarPermiso"><Icono Icon="fas fa-check fs--2 mr-1"></Icono>Guardar</Boton>
    </CardFooter>
</Card>

@code {

    [Parameter] public string RolId { get; set; }
    [Parameter] public string RolName { get; set; }

    PermissionDTO permissionDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarRoles();
    }

    public async Task CargarRoles()
    {
        var httpResponse = await repositorio.Get<PermissionDTO>($"api/Permission/{RolId}");

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            permissionDto = httpResponse.Response;
        }
    }

    private async Task AsignarPermiso()
    {
        await EditarRol("api/Permission");
    }

    private async Task EditarRol(string url)
    {
        var permisoDTO = new PermissionDTO() { RoleId = RolId, RoleClaims = permissionDto.RoleClaims };

        var httpResponse = await repositorio.Post<PermissionDTO>(url, permisoDTO);

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Operación realizada");
        }
    }
}
