@page "/indice-respuestas"
@inject IRepositorio repositorio
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Administrador")]
@using System.Security.Claims

<Card Class="card mb-3">
    <CardHeader Class="card-header bg-light">
        <div class="row justify-content-between align-items-center">
            <div class="col-sm-auto">
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <Texto Typo="Typo.h5" Class="mb-0">Respuestas</Texto>
                    </div>
                </div>
                @if (user.IsInRole("Administrador"))
                {
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <Enlace Class="btn btn-outline-dark btn-sm" Href="crear-quiz"><Icono Icon="fas fa-plus" data-fa-transform="shrink-3 down-2"></Icono><Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Crear</Texto></Enlace>
                        </div>
                    </div>
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <BlazoredTypeahead SearchMethod="BuscarCuestionario"
                                               Context="quiz"
                                               TValue="Quiz"
                                               TItem="Quiz"
                                               ValueExpression="@(()=>QuizSeleccionado)"
                                               Value="@QuizSeleccionado"
                                               ValueChanged="@((Quiz item) => CargarRespuestasFiltro2(item))"
                                               placeholder="Buscar Cuestionario">
                                <SelectedTemplate>
                                    @quiz.Nombre
                                </SelectedTemplate>
                                <ResultTemplate>
                                    @quiz.Nombre
                                </ResultTemplate>
                                <NotFoundTemplate>
                                    Lo sentimos, no hay registros con esos datos.
                                </NotFoundTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <BlazoredTypeahead SearchMethod="BuscarRespuestas"
                                               Context="res"
                                               TValue="Respuesta"
                                               TItem="Respuesta"
                                               ValueExpression="@(()=>RespuestaSeleccionada)"
                                               Value="@RespuestaSeleccionada"
                                               ValueChanged="@((Respuesta item) => CargarRespuestasFiltro(item))"
                                               placeholder="Buscar Estación">
                                <SelectedTemplate>
                                    @res.NombreUsuario
                                </SelectedTemplate>
                                <ResultTemplate>
                                    @res.NombreUsuario
                                </ResultTemplate>
                                <NotFoundTemplate>
                                    Lo sentimos, no hay registros con esos datos.
                                </NotFoundTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                }
            </div>
        </div>
    </CardHeader>
    <CardBody Class="card-body border-top">
        <Tabla Items="ListadeRespuestas" Context="item">
            <Cabecera>
                <th scope="col">Estación</th>
                <th scope="col">Pregunta</th>
                <th scope="col">Respuesta</th>
            </Cabecera>
            <Filas>
                <td>@item.NombreUsuario</td>
                <td>@item.Pregunta.NombrePregunta</td>
                <td>
                    @if (item.NombreRespuesta != null)
                    {
                        @item.NombreRespuesta
                    }
                    else
                    {
                        <text>No se respondio</text>
                    }
                </td>
            </Filas>
        </Tabla>
    </CardBody>
    <CardFooter Class="card-footer border-top d-flex justify-content-center bg-transparent">
        <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales" />
    </CardFooter>
</Card>
<br />

@code{

    ClaimsPrincipal user;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    public List<Respuesta> ListadeRespuestas { get; set; }

    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        await Cargar();
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<List<Respuesta>>($"api/Pregunta?pagina={pagina}");
        if (!responseHttp.Error)
        {
            ListadeRespuestas = responseHttp.Response;

            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }

    #region FiltroporRespuestas

    private async Task<IEnumerable<Respuesta>> BuscarRespuestas(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Respuesta>>($"api/Pregunta/buscar/{searchText}");
        return responseHttp.Response;
    }

    public Respuesta RespuestaSeleccionada { get; set; }

    private async Task CargarRespuestasFiltro(Respuesta item)
    {
        RespuestaSeleccionada = item;

        @if (item != null)
        {
            var responseHttp = await repositorio.Get<List<Respuesta>>($"api/Pregunta/FiltroRespuesta/{RespuestaSeleccionada.NombreUsuario}");
            @if (responseHttp.Error)
            {
                await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
            }
            else
            {
                ListadeRespuestas = responseHttp.Response;
                StateHasChanged();
            }
        }
        else
        {
            await Cargar();
        }
    }

    #endregion

    #region FiltroporCuestionario

    private async Task<IEnumerable<Quiz>> BuscarCuestionario(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Quiz>>($"api/Quiz/buscar/{searchText}");
        return responseHttp.Response;
    }

    public Quiz QuizSeleccionado { get; set; }

    private async Task CargarRespuestasFiltro2(Quiz item)
    {
        QuizSeleccionado = item;

        @if (item != null)
        {
            var responseHttp = await repositorio.Get<List<Respuesta>>($"api/Pregunta/FiltroQuiz/{QuizSeleccionado.QuizId}");
            @if (responseHttp.Error)
            {
                await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
            }
            else
            {
                ListadeRespuestas = responseHttp.Response;
                StateHasChanged();
            }
        }
        else
        {
            await Cargar();
        }
    }

    #endregion
}
