@inject IRepositorio repositorio
@using System.Security.Claims

<EditForm Model="@Quiz" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <Card Class="card mb-3">
        <CardHeader Class="card-header">
            <div class="row">
                <div class="col">
                    <Texto Typo="Typo.h5" Class="mb-0">@Titulo</Texto><br>                    
                </div>
                <div class="col-auto d-none d-sm-block">
                    <input type="date" class="form-control form-control-sm" id="fecha" @bind-value="@Quiz.FechaRegistro" disabled />
                </div>
            </div>
        </CardHeader>
        <CardBody Class="card-body border-top">
            <div class="form-row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <InputLabel for="nombre">Nombre</InputLabel>
                        <InputText class="form-control form-control-sm" id="nombre" placeholder="Nombre" @bind-Value="@Quiz.Nombre" />
                        <ValidationMessage For="@(() => Quiz.Nombre)" />
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        <InputLabel for="descripcion">Descripción</InputLabel>
                        <InputTextArea class="form-control form-control-sm" id="descripcion" placeholder="Descripción" rows="1" @bind-Value="@Quiz.Descripcion" />
                        <ValidationMessage For="@(() => Quiz.Descripcion)" />
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        <InputImg ImagenSeleccionada="ImagenSeleccionada" ImagenURL="@imagenURL" />
                    </div>
                </div>
                @if (Es_EditarQuiz == true)
                {
                    if (user.IsInRole("Administrador"))
                    {
                        <div class="col-sm-4">
                            <div class="form-group">
                                <br />
                                <ToolTip Delay="1000">
                                    <ChildContent>
                                        <CasillaVerificacion @bind-Checked="@Quiz.Activo" Label="Activar/Desactivar" />
                                    </ChildContent>
                                    <TooltipContent>
                                        <Texto Typo="Typo.body2">Si esta activo no realizar ninguna acción!</Texto>
                                    </TooltipContent>
                                </ToolTip>
                            </div>
                        </div>
                    }
                }
            </div>
        </CardBody>
        <CardFooter Class="card-footer border-top text-right bg-transparent">
            <Boton Class="btn btn-primary btn-sm mr-2" ButtonType="ButtonType.Button" @onclick="@(() => Quiz.LisadePreguntas.Add(new Pregunta()))">
                <Icono Icon="fas fa-plus mr-1" data-fa-transform="shrink-3"></Icono>Pregunta
            </Boton>
            <Boton Class="btn btn-secondary btn-sm mr-2" ButtonType="ButtonType.Submit"><Icono Icon="fas fa-check fs--2 mr-1"></Icono>Guardar</Boton>
        </CardFooter>
    </Card>

    @for (var i = 0; i < Quiz.LisadePreguntas.Count; i++)
    {
        var indice = i;
        var pregunta = Quiz.LisadePreguntas[i];

        <div class="card mb-3">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="mb-0">Pregunta @(i + 1)</h5>
                    </div>
                </div>
            </div>
            <div class="card-body border-top">
                <div class="form-row">
                    <div class="col-sm-4">
                        <div class="form-group">
                            <InputLabel for="nombre">Nombre</InputLabel>
                            <InputText id="nombre" placeholder="Nombre" type="text" class="form-control form-control-sm" @bind-Value="@pregunta.NombrePregunta" />
                            <ValidationMessage For="@(() => pregunta.NombrePregunta)" />
                        </div>
                    </div>                  
                    @if (Es_EditarQuiz == true)
                    {
                        if (user.IsInRole("Administrador"))
                        {
                            <div class="col-sm-4">
                                <div class="form-group">
                                    <br />
                                    <ToolTip Delay="1000">
                                        <ChildContent>
                                            <CasillaVerificacion @bind-Checked="@pregunta.Activo" Label="Activar/Desactivar" />
                                        </ChildContent>
                                        <TooltipContent>
                                            <Texto Typo="Typo.body2">Si esta activo no realizar ninguna acción!</Texto>
                                        </TooltipContent>
                                    </ToolTip>
                                </div>
                            </div>
                        }
                    }
                    <div class="col-sm-4">
                        <div class="form-group">
                            <InputLabel for="remover">Remover de la lista</InputLabel><br />
                            <BotonIcono Class="btn btn-danger btn-sm mr-1 mb-1" ButtonType="ButtonType.Button" @onclick="@(() => Quiz.LisadePreguntas.RemoveAt(indice))" Icon="fas fa-trash mr-1" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <br />
</EditForm>

@code{
    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public Quiz Quiz { get; set; }
    [Parameter] public bool Es_EditarQuiz { get; set; }
    [Parameter] public string Titulo { get; set; }

    private string imagenURL;

    [Parameter] public EventCallback OnValidSubmit { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        if (Es_EditarQuiz == false)
        {
            Quiz.FechaRegistro = DateTime.Now;
        }

        //sino hay imagen no hacemos nada, pero si hay imagen la guardamos en la variable imagenUrl
        if (!string.IsNullOrWhiteSpace(Quiz.Imagen))
        {
            imagenURL = Quiz.Imagen;
            Quiz.Imagen = null;//volvemos null la imagen que ya tenia, si el usuario no cambia la imagen nunca, entonces nunca la enviamos
        }
    }

    //este metodo actualiza la imagen con la nueva imagen seleccionada
    private void ImagenSeleccionada(string imagenBase64)
    {
        Quiz.Imagen = imagenBase64;
        imagenURL = null;
    }
}

