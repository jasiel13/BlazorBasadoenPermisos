@page "/detalles-quiz/{QuizId:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS
@using System.Security.Claims

@if (Quiz == null)
{
    <LoadingSpinner IsLoading="Procesando" />
}
else
{
    <Card Class="card mb-3">
        <CardMedia Class="bg-holder d-none d-lg-block bg-card" Image="Img/corner-4.png"></CardMedia>
        <CardBody Class="card-body position-relative">
            <div class="row">
                <div class="col-lg-8">
                    <Texto Typo="Typo.h3">@Quiz.Nombre</Texto>
                    <Texto Typo="Typo.body2" Class="mt-2">
                        @Quiz.Descripcion
                    </Texto>
                </div>
            </div>
        </CardBody>
    </Card>
}

@if (ListadePreguntas != null)
{
    <Card Class="card mb-3">
        <CardHeader Class="card-header bg-light">
            <div class="row justify-content-between align-items-center">
                <div class="col-sm-auto">
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <Texto Typo="Typo.h5" Class="mb-0">Cuestionario</Texto>
                        </div>
                    </div>
                </div>
                <div class="col-sm-auto">
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales" />
                        </div>
                    </div>
                </div>
            </div>
        </CardHeader>
        <CardBody Class="card-body border-top">
            @for (var item = 0; item < ListadePreguntas.Count(); item++)
            {
                //Nota si se ponen componentes marca error de Index was out of range. Must be non-negative and less than the size of the collection parameter name:index , usar solo html puro
                var num = item;
                <div style="background-color:white;" class="notification">
                    <div>
                        <div class="notification-body">
                            <p class="mb-1">
                                <span class="me-2" role="img" aria-label="Emoji">📝</span>
                                <strong>@ListadePreguntas[item].NombrePregunta</strong>                              
                            </p>
                            <span class="notification-time">
                                <input type="text" id="@item" class="form-control form-control-sm"
                                placeholder="Respuesta" @bind-value="@ListadeRespuestas[num].NombreRespuesta" />
                            </span>
                        </div>
                    </div>
                </div>
                <br />                     
            }
        </CardBody>
        <CardFooter Class="card-footer border-top text-right bg-transparent">
            <Boton Class="btn btn-secondary btn-sm mr-2" ButtonType="ButtonType.Button" @onclick="EnivarRespuestas"><Icono Icon="fas fa-check fs--2 mr-1"></Icono>Guardar</Boton>
        </CardFooter>
    </Card>
    <br />   
}

@code {  

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public int QuizId { get; set; }
    private bool Procesando = true;

    private Quiz Quiz;
    public List<Pregunta> ListadePreguntas { get; set; }

    private int paginaActual = 1;
    private int paginasTotales;

    string Nombre = "";

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Nombre = ($"{user.FindFirst(x => x.Type == ClaimTypes.Name)?.Value}");
        }

        await Cargar();
        await CargarPreguntas();
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarPreguntas(pagina);
    }

    private async Task CargarPreguntas(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<PaginadorGenerico<Pregunta>>($"api/Pregunta/Listado/{QuizId}?pagina={pagina}");
        if (!responseHttp.Error)
        {
            var resultado = responseHttp.Response.Resultado;
            paginaActual = responseHttp.Response.PaginaActual;
            paginasTotales = responseHttp.Response.TotalPaginas;

            ListadePreguntas = (List<Pregunta>)resultado;

            //se recorre las preguntas para ir agregando respuestas con dos datos el id de la pregunta y el nombre del usuario,
            //esto para que se pueda dibujar en el html una lista de respuestas ya que no estara vacia
            for(int i = 0; i < ListadePreguntas.Count(); i++)
            {
                ListadeRespuestas.Add(new Respuesta()
                { PreguntaId = ListadePreguntas[i].PreguntaId,
                  NombreUsuario = Nombre
                });
            }
        }
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<Quiz>($"api/Quiz/{QuizId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Quiz = responseHttp.Response;
            Procesando = false;
        }
    }

    #region EnivarRespuestas   

    List<Respuesta> ListadeRespuestas = new List<Respuesta>();

    public async Task EnivarRespuestas()
    {
        var httpResponse = await repositorio.Post("api/Pregunta", ListadeRespuestas);
        @if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Quiz Terminado!!");
            navigationManager.NavigateTo("indice-quiz");
        }      
    }  

    #endregion
}
